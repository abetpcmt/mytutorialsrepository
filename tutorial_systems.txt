# tutorial_systems.txt
# hardware: thinkpad x250
# platform: centos 7



Table of Contents

[ Network Troubleshooting ]
[ grub > - console ]
[ grub rescue> - console ]
[ INITRD IMG REBUILD ]
[ NMCLI WIFI CONNECT ]
[ CREATE BOOTABLE USB FROM ISO ]


### >>>

[ Network Troubleshooting ]
https://www.redhat.com/sysadmin/beginners-guide-network-troubleshooting-linux

	N E T W O R K    L A Y E R

	ISO Model 			TCP/IP
____________________________________________

Application Layer		Applicaiton Layer
Presentation Layer
Session Layer
____________________________________________

Transport Layer			Transport Layer
____________________________________________

Network Layer			Internet Layer
____________________________________________

Data Link Layer			Network Access Layer
Physical Layer			
_____________________________________________


Layer 1: Physical Layer

Check physical layer if up
# ip link show
# ip -br link show
# ip -s link show <eth0>	## more statistics
# ethtool <eth0> 			## check negotaited correct speed

if down set it up
# ip link set <eth0> up



Layer 2: Data Link

Check arp entries
# ip neigh show
# arp -a 			# obsolete



Layer 3: Network / internet layer

check ip address
# ip -br addr show

check connectivity
# ping 8.8.8.8

where the packet traversed on its way to destination
# traceroute 8.8.8.8

print routing table
# ip route show

check route with more than 1 network
# ip route show 10.0.0.0/8

check for DNS
# nslookup google.com

# dig google.com ANY
# dig -x 8.8.8.8

# host 8.8.8.8


Layer 4: Transport layer

check port listening
# ss -tunlp4
# ss -ta 
# ss -t4 stated established


check tcp connectivity
# telnet <url.com> <port#>

# tcpdump -i <nic-device>

check udp connectivity
# nc <ip-addr> -u <port>

# nmap -v <url.com>






### >>>

[ grub> - console ]

Something is wrong with your grub settings here
Now how to boot on your system to fix your grub problem

1. check existing drive & partition
grub> ls
(hdX) (hdX,msdosY)
: maybe alot more

2.check what partion has our files on so that we can boot to it.
grub> ls (hdX,msdosY)/
lost+found/ var/ dev/ run/ etc/ tmp/ sys/ proc/ usr/ bin root/ home/
mnt/ opt/

3. set found drive to root
grun> set root=(hdX,msdosY)

4. point to your kernel to boot from
grub> linux /boot/vmlinuz root=/dev/sdXY    ## make sure put correct /dev/sdXY

5. point to your init ram file system to use
grub> initrd /boot/initramfs.img

6. now reboot your system to check
grub> boot

When system is up now is the time to find and fix grub problem







### >>>


[ grub rescue> - console ]

grub rescue> when you see this grub-rescue console 
- you have missing grub files
- ony way to fix it is via live media disk/usb 

Fix:
1. boot on live media disk/usb

2. mount drive having problem
# mount /dev/sdaX /mnt

3. when /mnt mounted make it our root directory 
# chroot /mnt
# ls -l

REBUILD GRUB
4. create /boot/grub folder  if missing
# mkdir /boot/grub

5. run grub-mkconfig to create grub.cfg
# grub-mkconfig -o /boot/grub/grub.cfg

4. goto /boot/grub folder and check the grub.cfg exist
# cd /boot/grub

5. run grub-install to create missing files in /boot/grub
# grun-install /dev/sdX

6. verify if file exist
# ls -l

7. reboot the system and check.
# reboot






### >>>

[ INITRD IMG REBUILD ]
https://access.redhat.com/solutions/24029
for RHEL5 & 6

# cp -v /boot/initrd.img /tmp/initdir && cd /tmp/initdir

xz/LZMA format - Extract/Uncompress

# file initrd.img 
initrd.img: LZMA compressed data, streamed

# xz -dc < /boot/initrd-$(uname -r).img | cpio -idmv

xz/LZMA format - Repack/Recompress

# find . 2>/dev/null | cpio -o -c -R root:root | xz -9 --format=lzma > /boot/new.img

OR

gzip format - Extract/Uncompress

# file initrd.gz 
initrd.gz: gzip compressed data, was "initrd", from Unix, last modified: Thu Jul 30 05:36:08 2020, max compression
# zcat /boot/initrd-$(uname -r).img | cpio -idmv

gzip format - Repack/Recompress

# find . | cpio -o -c -R root:root | gzip -9 > /boot/new.img





https://www.lisenet.com/2014/rebuild-initrd-image-linux/

1. Copy and Extract initrd image
# IMG=initrd.img-3.4.89
# cp -v /boot/"$IMG" /tmp/"$IMG".gz && gunzip /tmp/"$IMG".gz
# mkdir /tmp/"$IMG"_dir && cd /tmp/"$IMG"_dir && cpio -iv < ../"$IMG"

2. Create a new initrd image
# find ./ | cpio -H newc -o > /tmp/"$IMG".cpio
# gzip /tmp/"$IMG".cpio && mv -v /tmp/"$IMG".cpio.gz /boot/"$IMG"-new 
# cd ~ && rm -Rf /tmp/"$IMG"*





### >>>

[ NMCLI WIFI CONNECT ]
:: 20200803 

1. show available devices eg. etherne, wifi
# nmcli d
# nmcli device 

2. show wifi device statut enabled/disabled 
# nmcli r 
# nmcli radio

3. turn wifi on or off
# nmcli r wifi on/off
# nmcli r

4. find available wifi and signal strength
# nmcli d wifi
# nmcli device wifi

5. connect to wifi
# nmcli d wifi connect <wifiname> [password <password>] 
# nmcli d

6. check interne connection
# ping 8.8.8.8  or    # ping google.com





### >>>

[ CREATE BOOTABLE USB FROM ISO ]
:: 08012020

1. Download ISO of your choice to /tmp and mount it on /media
  # wget -c -P /tmp/iso \
  http://mirrors.mit.edu/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso
  # mount -o loop /tmp/iso/CentOS-7-x86_64-Minimal-1804.iso /media/iso
  
  //// check it then umount it
  # ls -l /media/iso

2. Plug USB stick and identify its name
  # lsblk 
  NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
  sda           8:0    0 465.8G  0 disk
  └─sda1        8:1    0 465.8G  0 part /data
  sdx           8:16   1   7.5G  0 disk 
  └─sdx1        8:17   1   7.5G  0 part /run/media/linuxize/Kingston
  
3. Unmount the USB that is autoload with you plug it in.
  # umount /dev/sdx1      or  # umount /run/media/.....
  
4. Flash the iso image to USB drive
  # dd bs=4M if=/tmp/iso/CentOS-7-x86_64-Minimal-1804.iso of=/dev/sdx \
    status=progress oflag=sync
    
  458+1 records in
  458+1 records out 
  1921843200 bytes (1.9 GB, 1.8 GiB) copied, 147.006 s, 13 MB/s

5. That’s all, at this point you have a bootable CentOS on your USB stick.


### >>>



